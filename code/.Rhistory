class(data.train.trim[[1]]$sweeps)
class(data.train.trim[[1]]$erp_correct)
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
data.train.trim <- data.trim(data.train, c(0, 1000))
data.test.trim <- data.trim(data.test, c(0, 1000))
pcc.trim.results <- classify.pcc(data.train.trim, data.test.trim)
pcc.trim.eval <- classifier.eval(pcc.results$label.cross_val, pcc.results$prediction.cross_val)
pcc.trim.eval
pcc.trim.eval$accuracy
mean(pcc.trim.eval$accuracy)
pcc.eval$accuracy
cbind(pcc.eval$accuracy, pcc.trim.eval$accuracy)
dim(data.train.trim$sweeps)
dim(data.train.trim[[1]]$sweeps)
dim(data.train.trim[[1]]$erp_correct)
dim(data.train.trim[[1]]$erp_incorrect)
pcc.trim.results <- classify.pcc(data.train.trim, data.test.trim)
dim(data.test[[1]]$sweeps)
dim(data.train[[1]]$sweeps)
cv.test
dim(cv.test$sweeps)
dim(cv.test[1]$sweeps)
dim(cv.test[[1]]$sweeps)
pcc.trim.eval <- classifier.eval(pcc.trim.results$label.cross_val, pcc.trim.results$prediction.cross_val)
cbind(pcc.eval$accuracy, pcc.trim.eval$accuracy)
colMeans(cbind(pcc.eval$accuracy, pcc.trim.eval$accuracy))
submission.csv(pcc.trim.results$prediction.test, filename = "D:/GitHub/Kaggle/P300_Speller/submissions/pcc_classifier_05.csv")
data.train.trim <- data.trim(data.train, c(200, 1000))
data.test.trim <- data.trim(data.test, c(200, 1000))
accuracy <- cbind(pcc.eval$accuracy, pcc.trim.eval$accuracy)
accuracy
names(accuracy) <- c("All Time", "0 to 1000 ms")
accuracy
accuracy
accuracy <- cbind(pcc.eval$accuracy, pcc.trim.eval$accuracy)
class(accuracy)
accuracy <- data.frame(pcc.eval$accuracy, pcc.trim.eval$accuracy)
accuracy
names(accuracy) <- c("All Time", "0 to 1000 ms")
accuracy
data.train.trim <- data.trim(data.train, c(200, 1000))
data.test.trim <- data.trim(data.test, c(200, 1000))
pcc.trim.results <- classify.pcc(data.train.trim, data.test.trim)
source('D:/GitHub/Kaggle/code/p300_speller.R')
pcc.trim.results <- classify.pcc(data.train.trim, data.test.trim)
pcc.trim.eval <- classifier.eval(pcc.trim.results$label.cross_val, pcc.trim.results$prediction.cross_val)
tmp <- cbind(accuracy, pcc.trim.eval$accuracy)
tmp
accuracy <- cbind(accuracy, pcc.trim.eval$accuracy)
names(accuracy) <- c("[-Inf Inf]", "[0 1000]", "[200 1000]")
names(accuracy)
colMeans(accuracy)
data.train.trim <- data.trim(data.train, c(200, 700))
data.test.trim <- data.trim(data.test, c(200, 700))
submission.csv(pcc.trim.results$prediction.test, filename = "D:/GitHub/Kaggle/P300_Speller/submissions/pcc_classifier_06.csv")
data.train.trim <- data.trim(data.train, c(200, 700))
data.test.trim <- data.trim(data.test, c(200, 700))
pcc.trim.results <- classify.pcc(data.train.trim, data.test.trim)
pcc.trim.eval <- classifier.eval(pcc.trim.results$label.cross_val, pcc.trim.results$prediction.cross_val)
accuracy <- cbind(accuracy, pcc.trim.eval$accuracy)
names(accuracy) <- c("[-Inf Inf]", "[0 1000]", "[200 1000]", "[200 700]")
accuracy
colMeans(accuracy)
submission.csv(pcc.trim.results$prediction.test, filename = "D:/GitHub/Kaggle/P300_Speller/submissions/pcc_classifier_07.csv")
data.train.trim <- data.trim(data.train, c(200, Inf))
data.test.trim <- data.trim(data.test, c(200, Inf))
pcc.trim.results <- classify.pcc(data.train.trim, data.test.trim)
pcc.trim.eval <- classifier.eval(pcc.trim.results$label.cross_val, pcc.trim.results$prediction.cross_val)
accuracy <- cbind(accuracy, pcc.trim.eval$accuracy)
names(accuracy) <- c("[-Inf Inf]", "[0 1000]", "[200 1000]", "[200 700]", "[200 Inf]")
colMeans(accuracy)
length(data.train.trim)
data
which data
?data
for(s in data.train.trim)
{}
d <- matrix(340*16, dim(data.train.trim[[1]][2]))
d <- matrix(340*16, dim(data.train.trim[[1]][2]$sweeps))
d <- matrix(340*16, dim(data.train.trim[[1]]$sweeps)[2])
dim(d)
dim(data.train.trim[[1]]$sweeps)
dim(data.train.trim[[1]]$sweeps)[2]
d <- matrix(340*16, 17920)
for(i in 1:length(data.train.trim)){
d[i + (i-1)*340:i*340] <- data.train.trim[[i]]$sweeps
}
d
d <- matrix(340*16, 17920)
d[i + (i-1)*340:i*340,] <- data.train.trim[[i]]$sweeps
}
d <- matrix(340*16, 17920)
dim(d)
clear d
delte d
delte(d)
delete(d)
rm(d)
d <- matrix(340*16, 17920)
dim(d)
View(d)
?rm
rm(d)
dim(d)
e <- matrix(340*16, 17920)
dim(e)
?matrix
d <- matrix(nrow = 340*16, ncol = 17920)
rm(e)
dim(d)
data.train.trim <- data.trim(data.train, c(200, 1000))
dim(data.train.trim[[1]])
dim(data.train.trim[[1]]$sweeps)
data.train.trim <- data.trim(data.train, c(200, 600))
dim(data.train.trim[[1]]$sweeps)
d <- matrix(nrow = 340*16, ncol = 4536)
for(i in 1:length(data.train.trim)){
d[i + (i-1)*340:i*340,] <- data.train.trim[[i]]$sweeps
}
1+1
source('D:/GitHub/Kaggle/code/p300_speller.R')
?matrix
matrix(data = 1, nrow = 50, ncol = 1)
source('D:/GitHub/Kaggle/code/p300_speller.R')
erp_label
erp_label <- "-erp_filtered_1to20_epoched_-50to1800_NEB"
data.train <- import_eeg.rdata(subjects.train, erp_label)
ntimepoints
dim(data$sweeps)
370 / 56
20720 / 20
channel_label
class(channel_label)
dim(channel_label)
unique(channel_label)
?unique
unique(t(channel_label))
data.train <- import_eeg.rdata(subjects.train, erp_label)
plot(data.train[[1]]$time_stamps[data.train[[1]]$channel_label == 29], y = data.train[[1]]$erp_correct[data.train[[1]]$channel_label == 29]);
subjects.train
source('D:/GitHub/Kaggle/code/p300_speller.R')
erp_label <- "-erp_filtered_1to20_epoched_-50to1800"
data.train <- import_eeg.rdata(subjects.train, erp_label)
plot(data.train[[1]]$time_stamps[data.train[[1]]$channel_label == 29], y = data.train[[1]]$erp_correct[data.train[[1]]$channel_label == 29]);
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
tmp =  erpbyrow2chan(data.train[[1]]$erp_correct)
dim(tmp)
source('D:/GitHub/Kaggle/code/p300_speller.R')
tmp =  erpbyrow2chan(data.train[[1]]$erp_correct)
dim(tmp)
plot(data.train[[1]]$time_stamps[1:370], tmp[29,])
source('D:/GitHub/Kaggle/code/p300_speller.R')
tmp =  erpbyrow2chan(data.train[[1]]$erp_correct)
plot(data.train[[1]]$time_stamps[1:370], tmp[29,])
source('D:/GitHub/Kaggle/code/p300_speller.R')
tmp =  erpbyrow2chan(data.train[[1]]$erp_correct)
plot(data.train[[1]]$time_stamps[1:370], tmp[29,])
tmp =  erpbyrow2chan(data.train[[1]]$erp_correct)
dim(data)
?t
dim(data) = c(number_ofchannels, ntimepoints)
dim(data) = c(number_of_channels, ntimepoints)
dim(data)
plot(1:370, data[29,])
plot(1:370, data[,29])
plot(data[,29])
dim(data)
dim(data) = c(number_of_channels, ntimepoints)
tmp =  erpbyrow2chan(data.train[[1]]$erp_correct)
dim(data)
tmp = data
dim(tmp) = c(ntimepoints, number_of_channels)
dim(tmp)
plot(tmp[,29])
tmp = t(tmp)
plot(tmp[29,])
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('~/.active-rstudio-document')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
union(1:10, 9:12)
intersect(1:10, 9:12)
?intersect
is.element(1:10, 9:12)
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
nrows(1:10)
rows(1:10)
nrow(1:10)
?nrow
source('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
dim(sweeps)
dim(erpbyrow2chan(sweeps[i,]))
dim(sweeps[i,])
length(sweeps[i,])
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
dim(erpbyrow2chan(sweeps[i,]))
dim(data)
length(data)
class(data)
dim(data)
?matrix
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
dim(data)
dim(data)
dim(data)
plot(data[29,])
dim(mean_sweeps)
rbind(mean_sweeps, colMeans(erpbyrow2chan(sweeps[i,])))
dim(mean_sweeps)
length(mean_sweeps)
mean.chan(data.train, channels = 1:56)
mean.chan(data.train, channels = 1:56)
Q
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
dim(mean_sweeps)
dim(mean_sweeps)
class(mean_sweeps)
mean.chan(data.train, channels = 1:56)
class(data)
dim(mean_sweeps)
length(mean_sweeps)
dim(rbind(mean_sweeps, colMeans(erpbyrow2chan(sweeps[i,]))))
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
length(channel_mask)
channel_mask
dim(subject.data[[s]]$channel_label)
dim(subject.data[[s]]$channel_label[mask])
dim(subject.data[[s]]$channel_label[channel_mask])
length(subject.data[[s]]$channel_label[channel_mask])
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
length(is.element(subject.data[[1]]$channel_label, channels))
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
length(channel_mask)
unique(channel_mask)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
mean.chan(data.train, channels = 1:56)
length(subject.data[[s]]$time_stamps)
length(subject.data[[s]]$time_stamps[channel_mask])
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
dim(sweeps)
dim(mean.sweeps)
class(mean.sweeps)
length(mean.sweeps)
plot(mean.sweeps)
dim(mean.sweeps)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
dim(mean.sweeps)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
subject.data[[1]]
subject.data[[1]]$class_labels
make.erp.sweeps(sweeps = mean.sweeps, sweep.labels = subject.data[[s]]$class_labels, event.label = 1)
subject.data[[1]]$class_labels
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
mean.chan(data.train, channels = 1:56)
dim(sweeps)[2]
dim(sweeps)[2]/number_of_channels
dim(erp)
plot(erp)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
dim(sweeps)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
q
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
dim(mean.sweeps)
plot(mean.data$time_stamps[1:370], mean.data$erp_correct, type = 'l')
line(x = mean.data$time_stamps[1:370], mean.data$erp_incorrect, col = 'red')
line(x = mean.data$time_stamps[1:370], mean.data$erp_incorrect, color = 'red')
?line
lines(x = mean.data$time_stamps[1:370], mean.data$erp_incorrect, color = 'red')
lines(x = mean.data$time_stamps[1:370], mean.data$erp_incorrect, col = 'red')
lines(x = mean.data$time_stamps[1:370], mean.data$erp_incorrect, col = 'r')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
plot(mean.data$time_stamps[1:370], mean.data$erp_incorrect, type = 'l')
plot(mean.data$time_stamps[1:370], mean.data$erp_incorrect, type = 'l')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
mean.data$erp_correct
names(mean.data)
dim(mean.data$time_stamps)
length(mean.data$time_stamps)
?ncol
classsubject.data[[s]]$channel_labels
classsubject.data[[s]]$channel_label
subject.data[[s]]$channel_label
class(subject.data[[s]]$channel_label)
?matrix
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
mean.chan(data.train, channels = 1:56)
length(return.data)
names(return.data[[1]])
plot(mean.data$time_stamps[1:370], mean.data$erp_unknown, type = 'l')
data.train.1chan <- mean.chan(data.train, channels = 1:56)
length(data.train.1chan)
data.test.1chan <- mean.chan(data.test, channels = 1:56)
erp_label <- "-erp_filtered_1to20_epoched_-50to1800_NEB"
data.train <- import_eeg.rdata(subjects.train, erp_label)
data.test <- import_eeg.rdata(subjects.test, erp_label)
data.train.1chan <- mean.chan(data.train, channels = 1:56)
data.test.1chan <- mean.chan(data.test, channels = 1:56)
pcc.1chan.results <- classify.pcc(data.train.1chan, data.test.1chan)
names(data.train[[1]])
length(data.train[[1]]$time_stamps
)
length(data.train[[1]]$class_labels)
pcc.1chan.results <- classify.pcc(data.train.1chan, data.test.1chan)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pcc.1chan.results <- classify.pcc(data.train.1chan, data.test.1chan)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pcc.1chan.results <- classify.pcc(data.train.1chan, data.test.1chan)
length(data.test)
i
data.test[[i]]$class_labels
data.train[[1]]$channel_label
unique(data.train[[1]]$channel_label)
data.train.1chan <- mean.chan(data.train, channels = 1:56)
length(mean.data$time_stamps)
length(mean.data$channel_label)
str(mean.data)
str(subject.data[[s]])
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
data.train.1chan <- mean.chan(data.train, channels = 1:56)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
data.train.1chan <- mean.chan(data.train, channels = 1:56)
data.test.1chan <- mean.chan(data.test, channels = 1:56)
pcc.1chan.results <- classify.pcc(data.train.1chan, data.test.1chan)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
pcc.1chan.results <- classify.pcc(data.train.1chan, data.test.1chan)
pcc.1chan.eval <- classifier.eval(pcc.1chan.results$label.cross_val, pcc.1chan.results$prediction.cross_val)
pcc.1chan.eval$accuracy
mean(pcc.1chan.eval$accuracy)
submission.csv(pcc.trim.results$prediction.test, filename = "D:/GitHub/Kaggle/P300_Speller/submissions/pcc_classifier_08.csv")
data.train.1chan.trim <- data.trim(data.train.1chan, c(200, 700))
data.train.1chan.trim <- data.trim(data.train.1chan, c(200, 700))
dim(data)
names(data)
data.train.1chan.trim <- data.trim(data.train.1chan, c(200, 700))
length(data)
names(data[[1]])
names(data.train.1chan)
names(data.train.1chan[[1]])
names(data.train[[1]])
data.train.1chan.trim <- data.trim(data.train.1chan, c(200, 700))
dim(mask)
length(mask)
mask
df.names
names(mylist.mask)
mylist.mask
str(mylist.mask)
length(names(mylist.mask))
names(mylist)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
data.train.1chan.trim <- data.trim(data.train.1chan, c(200, 700))
names(mylist.mask)
source('D:/GitHub/Kaggle/code/p300_speller.R')
data.train.1chan.trim <- data.trim(data.train.1chan, c(200, 700))
data.test.1chan.test <- data.trim(data.test.1chan, c(200, 700))
pcc.1chan.trim.results <- classify.pcc(data.train.1chan, data.test.1chan)
pcc.1chan.trim.eval <- classifier.eval(pcc.1chan.trim.results$label.cross_val, pcc.1chan.trim.results$prediction.cross_val)
pcc.1chan.trim.results <- classify.pcc(data.train.1chan.trim, data.test.1chan.trim)
data.test.1chan.trim <- data.trim(data.test.1chan, c(200, 700))
pcc.1chan.trim.results <- classify.pcc(data.train.1chan.trim, data.test.1chan.trim)
pcc.1chan.trim.eval <- classifier.eval(pcc.1chan.trim.results$label.cross_val, pcc.1chan.trim.results$prediction.cross_val)
pcc.1chan.trim.eval$accuracy
mean(pcc.1chan.trim.eval$accuracy)
cbind(pcc.1chan.eval$accuracy, pcc.1chan.trim.eval$accuracy)
cbind(pcc.1chan.eval$accuracy, pcc.1chan.trim.eval$accuracy, pcc.trim.eval$accuracy)
submission.csv(pcc.trim.results$prediction.test, filename = "D:/GitHub/Kaggle/P300_Speller/submissions/pcc_classifier_09.csv")
erp_label
source('D:/GitHub/Kaggle/code/p300_speller.R')
erp_label <- "-erp_filtered_1to20_epoched_-50to1800_NEB"
data.train <- import_eeg.rdata(subjects.train, erp_label)
data.test <- import_eeg.rdata(subjects.test, erp_label)
data.train.1chan <- mean.chan(data.train, channels = 1:56)
data.test.1chan <- mean.chan(data.test, channels = 1:56)
data.train.1chan.trim <- data.trim(data.train.1chan, c(200, 700))
data.test.1chan.trim <- data.trim(data.test.1chan, c(200, 700))
pcc.1chan.trim.results <- classify.pcc(data.train.1chan.trim, data.test.1chan.trim)
pcc.1chan.trim.eval <- classifier.eval(pcc.1chan.trim.results$label.cross_val, pcc.1chan.trim.results$prediction.cross_val)
cbind(pcc.1chan.eval$accuracy, pcc.1chan.trim.eval$accuracy, pcc.trim.eval$accuracy)
colMeans(cbind(pcc.1chan.eval$accuracy, pcc.1chan.trim.eval$accuracy, pcc.trim.eval$accuracy))
install.packages(svd)
install.packages("svd")
?prcomp
pc = prcomp(data.train[[1]]$sweeps)
dim(pc)
pc
plot(pc, type = 'l')
summary(pc)
predict(pc, newdata = tail(data.train[[1]]$sweeps, 2))
library(devtools)
install.packages("devtools")
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(pc, groups = data.train[[1]]$class_labels, ellipse = TRUE, circle = TRUE)
g <- g + theme(legend.direction = "horizontal", legend.position = "top")
g
?preProcess
qQ
Q
Q
?prcomp
pc = prcomp(t(data.train[[1]]$sweeps))
summary(pc)
pc$rotation
dim(pc$rotation)
?svd
tdata = erpbyrow2chan(data.train[[1]]$sweeps);
dim(tdata)
dim(t(tdata))
x <- svd(t(tdata))
dim(x$d)
dim(x$u)
dim(x$v)
x <- svd(tdata)
dim(x$v)
dim(x$u)
length(d)
length(x$d)
plot(x)
pc = prcomp(tdata)
summary(pc)
plot(pc)
dim(pc$rotation)
dim(pc$x)
?prcomp
?svd
D <- diag(s$d)
dim(D)
D <- diag(x$d)
dim(D)
X = x$u %*% diag(x$d) %*% t(x$v)
dim(X)
plot(X)
dim(X)
plot(X[1,])
D = s$d
D[1:2] = 0
D = diag(D)
dim(pc$rotation)
?prcomp
?preProcess
require(caret)
?preprocess
?preProcess
PC = preProcess(data.train[[1]]$sweeps, method = c("center", "scale", "pca"))
plot(PC)
dim(PC$rotation)
getwd()
save.image()
