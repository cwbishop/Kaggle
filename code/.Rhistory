a$setmean()
source('C:/Users/cwbishop/Dropbox/Coursera/R Programming/ProgAssign2.R')
a$setmean(10)
a$mean
attributes(a)
a$get
a$get()
a$getmean()
mean(c(1,10,5))
a <- makeVector(c(1, 10, 5))
a$get
a$get()
a$getmean()
a$setmean()
a$getmean()
source('C:/Users/cwbishop/Dropbox/Coursera/R Programming/ProgAssign2.R')
a <- makeVector(c(1, 10, 5))
a$getmean
a$getmean()
a(get)
a$get
a$get()
a$getmean()
source('C:/Users/cwbishop/Dropbox/Coursera/R Programming/ProgAssign2.R')
source('C:/Users/cwbishop/Dropbox/Coursera/R Programming/ProgAssign2.R')
source('C:/Users/cwbishop/Dropbox/Coursera/R Programming/ProgAssign2.R')
a <- makeVector(c(1, 10, 5))
a
a$get
a$get()
a$getmean
a$getmean()
a$setmean()
source('C:/Users/cwbishop/Dropbox/Coursera/R Programming/ProgAssign2.R')
x <- cachemean
x
x
x <- cachemean()
x <- cachemean(c(10,11,12))
source('C:/Users/cwbishop/Dropbox/Coursera/R Programming/ProgAssign2.R')
x <- cachemean(a)
x
a
a.getmean()
a$getmean()
y <- cachemean(a)
y
?ggplot2
??ggplot2
install.packages("ggplot2")
?ggplot2
library(ggplot2)
?ggplot2
setClass("eeg_dataset", representation(subject_id = "character"))
getClass("eeg_dataset")
setClass("eeg_dataset", representation(subject_id = "character", continuous_data = "data.frame"))
getSlots("eeg_dataset")
a.temp <- 50
a
a.temp
a.run <- 51
a
a.temp
a
debugSource('~/GitHub/Kaggle/P300 Speller/code/p300_speller.R')
?t
source('~/GitHub/Kaggle/P300 Speller/code/eeg_class.R')
source('~/GitHub/Kaggle/P300 Speller/code/eeg_class.R')
source('~/GitHub/Kaggle/P300 Speller/code/eeg_class.R')
a<- new(eeg_dataset)
a<- new("eeg_dataset")
a
plot_channel(a)
dbquit
source('~/GitHub/Kaggle/P300 Speller/code/eeg_class.R')
source('~/GitHub/Kaggle/P300 Speller/code/eeg_class.R')
a<- new("eeg_dataset")
a@time_stamps
a@time_stamps <- 1:10
a@time_stamps
a@sampling_rate <- 200
a@countinuous_data <- 5:14
source('~/GitHub/Kaggle/P300 Speller/code/eeg_class.R')
a<- new("eeg_dataset")
a@countinuous_data <- 5:14
a@continuous_data <- 5:14
a@sampling_rate <- 200
a@time_stamps
a@time_stamps <- 1:10
?Scale
?scale
source('D:/GitHub/Kaggle/code/p300_speller.R')
setwd("D:/GitHub/Kaggle/code")
data.train <- import_eeg.rdata(subjects.train, erp_label)
data.test <- import_eeg.rdata(subjects.test, erp_label)
sweeps.concat <- concat.sweeps.chan.group(data.train)
?message
message('test')
paste('Concatenating subject', as.char(1), 'of', as.char(10))
as.message(paste('Concatenating subject', as.character(1), 'of', as.character(10)))
message(paste('Concatenating subject', as.character(1), 'of', as.character(10)))
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
?scale
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
attributes(data.scale)
data.scale$`scaled:center`
attributes(data.scale)$scaled:center
attributes(data.scale)$`scaled:center`
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
?svd
attributes(s)
pc
dim(s$u)
dim(pc$u)
dim(sweeps.concat)
dim(pc$v)
d <- t(pc$u) %*% sweeps.concat
dim(d)
dim(pc$v)
plot(pc$v[1:1000,1])
plot(pc$v[1:1000,2])
plot(pc$v[1:1000,1])
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
dim(sweeps.concat)
?scale
names(pc)
?svd
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
dim(sweeps.concat)
dim(data.train[[1]]$sweeps)
340 * 20720
2012800 / 7044800
2012800*56
112716800 / (340 * 20720)
size(pc$u)
dim(pc$u)
dim(sweeps.concat)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
dim(sweeps.concat)
?apply
?scale
names(pc)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pc$u
plot(pc$u)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
proj
p
p1 <- pca.svd.project(sweeps.concat, pc = pc, pc.index = 1:2, number_of_channels = 56)
dim(data)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
p1 <- pca.svd.project(sweeps.concat, pc = pc, pc.index = 1:2, number_of_channels = 56)
dim(data)
dim(U)
dim(data.project)
dim(p1)
plot(p1[1,])
plot(p1[1,1:1000])
plot(p1[1,1:1000])
plot(sweeps.concat[1,1:1000])
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pc$cmeans
apply(sweeps.concat, 1, mean)
apply(sweeps.concat, 1, sd)
pc$cstd
dim(pc$v)
plot(pc$v[1,1:1000])
plot(pc$v[1:1000,1])
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
plot(sweeps.concat[1,1:1000])
plot(pc$v[1:1000,1])
p1 <- pca.svd.project(sweeps.concat, pc = pc, pc.index = 1, number_of_channels = 56)
dim(p1)
plot(p1[1:1000])
pc1 <- pca.svd.estimate(sweeps.concat, center = FALSE, scale = FALSE, number_of_channels = 56);
p2 <- pca.svd.project(sweeps.concat, pc = pc1, pc.index = 1, number_of_channels = 56)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
p2 <- pca.svd.project(sweeps.concat, pc = pc1, pc.index = 1, number_of_channels = 56)
pc$cmeans
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
p2 <- pca.svd.project(sweeps.concat, pc = pc1, pc.index = 1, number_of_channels = 56)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
p2 <- pca.svd.project(sweeps.concat, pc = pc1, pc.index = 1, number_of_channels = 56)
pc$cmeans != 'NULL'
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
p2 <- pca.svd.project(sweeps.concat, pc = pc1, pc.index = 1, number_of_channels = 56)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
p2 <- pca.svd.project(sweeps.concat, pc = pc1, pc.index = 1, number_of_channels = 56)
dim(data.project)
dim(sweeps.concat)
plot(sweeps.concat[1,1:1000])
lines(x = 1:1000, y = pc2[1:1000], col = 'r')
lines(x = 1:1000, y = p2[1:1000], col = 'r')
lines(x = 1:1000, y = p2[1:1000], color = 'r')
source('D:/GitHub/Kaggle/code/p300_speller.R')
lines(x = 1:1000, y = p2[1:1000], color = 'r')
plot(x = 1:1000, y = p2[1:1000], color = 'r')
?svd
plot(pc2$u %*% pc2$d %*% t(pc2$v))
sweeps.concat <- concat.sweeps.chan.group(data.train[1])
warnings()
dim(sweeps.concat)
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
dim(pc$u)
p1 <- pca.svd.project(sweeps.concat, pc = pc, pc.index = 1, number_of_channels = 56)
dim(p1)
plot(p1)
plot(t(p1))
plot(pc$d)
sign(pc$v)
sign(pc$u)
sign(pc$u[,1])
sign(pc$v[1,])
p1 <- pca.svd.project(sweeps.concat, pc = pc, pc.index = 1, number_of_channels = 56)
dim(p1)
plot(t(p1))
plot(t(p1), type = 'l')
p1 <- pca.svd.project(sweeps.concat, pc = pc, pc.index = 1:2, number_of_channels = 56)
dim(p1)
plot(t(p1))
plot(t(p1[1,]))
plot((p1[1,]))
lines(x = 1:125800, y = p1[2,], color = 'r')
lines(x = 1:125800, y = p1[2,], colour = 'r')
lines(x = 1:125800, y = p1[2,], col = 'r')
line(x = 1:125800, y = p1[2,], col = 'r')
line(x = 1:125800, y = p1[2,], color = 'r')
?lines
line(x = 1:125800, y = p1[2,], col = 'Red')
line(x = 1:125800, y = p1[2,], col = 'red')
lines(x = 1:125800, y = p1[2,], col = 'Red')
sweeps.concat <- concat.sweeps.chan.group(data.train[1:2])
pc1 <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
dim(pc$u)
dim(pc1$u)
p1 <- pca.svd.project(sweeps.concat, pc = pc, pc.index = 1, number_of_channels = 56)
p2 <- pca.svd.project(sweeps.concat, pc = pc1, pc.index = 1, number_of_channels = 56)
plot(t(p1))
dim(p1)
lines(x = 1:length(p1), y = p2, col = 'Red')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
sweeps.concat <- concat.sweeps.chan.group(data.train[1])
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
dim(data.scale)
dim(t(data.scale))
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
function(data, center = TRUE, scale = TRUE, number_of_channels = 56, ...){
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
dim(data.scale)
dim((1/ncol(data.scale)) * ((data.scale) %*% t(data.scale)))
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
Q
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
dim(data.cov)
sweeps.concat <- concat.sweeps.chan.group(data.train[1:2])
pc1 <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
p1 <- pca.svd.project(sweeps.concat, pc = pc, pc.index = 1, number_of_channels = 56)
p2 <- pca.svd.project(sweeps.concat, pc = pc1, pc.index = 1, number_of_channels = 56)
plot(t(p1))
lines(x = 1:length(p1), y = p2, col = 'Red')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pc2 <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
p3 <- pca.svd.project(sweeps.concat, pc = pc2, pc.index = 1, number_of_channels = 56)
lines(x = 1:length(p1), y = p3, col = 'Blue')
plot(t(p3))
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
dim(p1)
dim(p3)
dim(t(p3) %*% pc2$u[,1])
x = t((t(p3) %*% pc2$u[,1]))
dim(x)
plot(x[1,])
plot(sweeps.concat[1,])
lines(x = 1:length(x), y = x, col = 'Blue')
dim(x)
lines(x = 1:length(x), y = x[1,], col = 'Red')
lines(x = 1:ncol(x), y = x[1,], col = 'Red')
sweeps.concat <- concat.sweeps.chan.group(data.train)
erp_label <- "-erp_filtered_1to20_epoched_-50to1800"
source('D:/GitHub/Kaggle/code/p300_speller.R')
data.train <- import_eeg.rdata(subjects.train, erp_label)
sweeps.concat <- concat.sweeps.chan.group(data.train)
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
sweeps.project <- pca.svd.project.sweeps(data = data.train[[1]]$sweeps[1:2,], pc = pc, pc.index = 1)
dim(sweep)
dim(sweep.project)
plot(t(sweep.project))
i
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
sweeps.project <- pca.svd.project.sweeps(data = data.train[[1]]$sweeps[1:2,], pc = pc, pc.index = 1)
dim(sweep.project)
plot(t(sweep.project))
i
dim(sweep)
plot(sweep.project)
plot(t(sweep.project))
dim(data)
plot(data.train[[1]]$sweeps[1,])
plot(data.train[[1]]$sweeps[2,])
sweeps.project <- pca.svd.project.sweeps(data = data.train[[1]]$sweeps[1:2,], pc = pc, pc.index = 1)
plot(data[i,])
plot(sweep.project)
plot(t(sweep.project))
dim(data.project)
plot(data.project[1,])
lines(x = 1:ncol(data.project), y = data.project[2,], col = 'Red')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.erp(data.train[[1]]$sweeps, data.train[[1]]$class_labels, event.label = 1, pc = pc, pc.index = 1)
source('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.erp(data.train[[1]]$sweeps, data.train[[1]]$class_labels, event.label = 1, pc = pc, pc.index = 1)
dim(data.project)
dim(erp)
plot(erp)
erp1 = pca.svd.erp(data.train[[1]]$sweeps, data.train[[1]]$class_labels, event.label = 1, pc = pc, pc.index = 1)
erp2 = pca.svd.erp(data.train[[1]]$sweeps, data.train[[1]]$class_labels, event.label = 2, pc = pc, pc.index = 1)
plot(data.train[[1]]$time_stamps[1:370], erp1)
lines( x = data.train[[1]]$time_stamps[1:370], y = erp2, color = 'Red')
lines( x = data.train[[1]]$time_stamps[1:370], y = erp2, col = 'Red')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
erp_label
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
data.train <- import_eeg.rdata(subjects.train, erp_label)
sweeps.concat <- concat.sweeps.chan.group(data.train)
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
erp1 = pca.svd.erp(data.train[[1]]$sweeps, data.train[[1]]$class_labels, event.label = 1, pc = pc, pc.index = 1)
erp2 = pca.svd.erp(data.train[[1]]$sweeps, data.train[[1]]$class_labels, event.label = 2, pc = pc, pc.index = 1)
plot(data.train[[1]]$time_stamps[1:370], erp1)
lines( x = data.train[[1]]$time_stamps[1:370], y = erp2, col = 'Red')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
data.train[[1]]$channel_label
dim(data.train[[1]]$channel_label)
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data.train)
length(data.project)
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
dim(data.project[[i]]$sweeps)
dim(data[[i]]$sweeps)
i
dim(data[[1]]$sweeps)
dim(data.project[[1]]$sweeps)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
dim(data.project[[1]]$erp_correct)
plot(data.project[[1]]$erp_correct)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
length(data.project)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
length(group.project)
names(group.project)
plot(group.project$time_stamps, group.project$erp_correct)
plot(group.project$time_stamps[1:370], group.project$erp_correct)
list(data.train[[1:10]]$erp_correct
)
?geom_ribbon
# Generate data
huron <- data.frame(year = 1875:1972, level = as.vector(LakeHuron))
library(plyr) # to access round_any
huron$decade <- round_any(huron$year, 10, floor)
h <- ggplot(huron, aes(x=year))
h + geom_ribbon(aes(ymin=0, ymax=level))
h + geom_area(aes(y = level))
# Add aesthetic mappings
h + geom_ribbon(aes(ymin=level-1, ymax=level+1))
h + geom_ribbon(aes(ymin=level-1, ymax=level+1)) + geom_line(aes(y=level))
?data.frame
data.frame("tenths" = 1:10)
paste0("PC", as.character(1))
?ggplot
source('D:/GitHub/Kaggle/code/p300_speller.R')
?geom_line
source('D:/GitHub/Kaggle/code/p300_speller.R')
source('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
dim(erp_correct)
dim(data2plot)
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
pca.svd.screen(data = data.train, pc = pc, pc.index = 1, number_of_channels = 56, plot.flag= TRUE)
gg
pca.svd.screen(data = data.train, pc = pc, pc.index = 1:10, number_of_channels = 56, plot.flag= TRUE)
gg
gg
pca.svd.screen(data = data.train, pc = pc, pc.index = 1:10, number_of_channels = 56, plot.flag= TRUE)
?fastICA
require(caret)
?preProcess
?fastICA
gg
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1:10, number_of_channels = 56, plot.flag= TRUE)
gg
gg
gg
gg
gg
gg
gg
gg
gg
gg
gg
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
?qplot
pca.svd.screen(data = data.train, pc = pc, pc.index = 1:10, number_of_channels = 56, plot.flag= TRUE)
ggplot(gg)
pca.svd.screen(data = data.train, pc = pc, pc.index = 1:10, number_of_channels = 56, plot.flag= TRUE)
gg
gg
gg
gg
gg
gg
gg
gg
gg
gg
gg
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
erp_label <- "-erp_filtered_1to20_epoched_-50to1800_NEB"
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
data.train <- import_eeg.rdata(subjects.train, erp_label)
sweeps.concat <- concat.sweeps.chan.group(data.train)
pc <- pca.svd.estimate(sweeps.concat, center = TRUE, scale = TRUE, number_of_channels = 56);
pca.svd.screen(data = data.train, pc = pc, pc.index = 1:10, number_of_channels = 56, plot.flag= TRUE)
pca.svd.screen(data = data.train, pc = pc, pc.index = 1:10, number_of_channels = 56, plot.flag= TRUE)
gg
gg
gg
gg
gg
gg
gg
gg
gg
gg
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1:10, number_of_channels = 56, plot.flag= TRUE)
gg
gg
gg
gg
gg
gg
gg
gg
gg
gg
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
debugSource('D:/GitHub/Kaggle/code/p300_speller.R')
pca.svd.screen(data = data.train, pc = pc, pc.index = 1:10, number_of_channels = 56, plot.flag= TRUE)
73.04/8
105.04/8
save.image()
